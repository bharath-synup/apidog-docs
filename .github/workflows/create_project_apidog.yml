name: Create Project on Apidog

# This allows you to manually trigger the workflow and pass a custom client name
on:
  workflow_dispatch:
    inputs:
      client_name:
        description: 'Client Name'
        required: true
        default: 'Test Client'
      client_logo_url:
        description: 'Client Logo URL'
        required: true
        default: 'https://example.com/logo.png'
      client_base_url:
        description: 'Client Base URL (domain only, e.g., app.example.com, exclude https://)'
        required: true
        default: 'app.example.com'
      client_api_docs_url:
        description: 'URL for the api documentation to be hosted'
        required: true
        default: 'https://api.example.com'

jobs:
  test:
    runs-on: ubuntu-latest

    steps:
      # Checkout the repository to use it in the job
      - name: Checkout repository
        uses: actions/checkout@v3

      # Set up Python environment
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.x'

      # Install the dependencies
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      # Install Playwright browsers
      - name: Install Playwright Browsers
        run: |
          python -m playwright install

      - name: Install jq
        run: sudo apt-get install -y jq

      # Update env_file.json with client_base_url and client_name
      - name: Create customized env_file.json
        run: |
          jq '.environments[0].baseUrl = "https://${{ github.event.inputs.client_base_url }}" |
              .environments[0].baseUrls.default = "https://${{ github.event.inputs.client_base_url }}" |
              .environments[0].name = "${{ github.event.inputs.client_name }}"' env_file.json > "${{ github.event.inputs.client_name }}_env.json"
        shell: bash

      # Run the Playwright test with the provided client name
      - name: Run Playwright test
        run: |
          pytest -s tests/test_createproject.py --client_name "${{ github.event.inputs.client_name }}" --client_logo_url "${{ github.event.inputs.client_logo_url }}" --client_base_url "${{ github.event.inputs.client_base_url }}"  --client_api_docs_url "${{ github.event.inputs.client_api_docs_url }}"

        # Upload the project_ids.txt file as an artifact for inspection
      - name: Upload project_ids.txt artifact
        uses: actions/upload-artifact@v3
        with:
          name: project_ids
          path: project_ids.txt

      - name: Commit customized env_file.json
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          git add "${{ github.event.inputs.client_name }}_env.json"
          git commit -m "Add customized environment file for ${{ github.event.inputs.client_name }}" || echo "No changes to commit"
          git push
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      # Optional: Commit changes if the project_ids.txt was modified
      - name: Commit changes to project_ids.txt
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          git add project_ids.txt
          git commit -m "Update project_ids.txt with new project ID" || echo "No changes to commit"
          git push
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
